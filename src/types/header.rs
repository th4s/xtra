use super::{ByteArray, ByteVec};
use num_bigint::BigUint;
use serde::Deserialize;

/// The block header
#[derive(Clone, Debug, PartialEq, Deserialize)]
pub struct Header {
    pub parent_hash: ByteArray<32>,
    pub sha3_uncles: ByteArray<32>,
    pub miner: ByteArray<20>,
    pub state_root: ByteArray<32>,
    pub transactions_root: ByteArray<32>,
    pub receipts_root: ByteArray<32>,
    pub logs_bloom: ByteVec,
    pub difficulty: BigUint,
    pub number: BigUint,
    pub gas_limit: BigUint,
    pub gas_used: BigUint,
    pub time_stamp: u64,
    pub extra_data: ByteVec,
    pub mix_hash: ByteArray<32>,
    pub nonce: ByteArray<8>,
}

impl std::fmt::Display for Header {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{{\n\tparent_hash: {}, \n\tsha3_uncles: {}, \n\tminer: {}, \n\tstate_root: {}, \
            \n\ttransactions_root: {}, \n\treceipts_root: {}, \n\tlogs_bloom: 0x..., \n\tdifficulty: {}, \
            \n\tnumber: {}, \n\tgas_limit: {}, \n\tgas_used: {}, \n\ttime_stamp: {}, \n\textra_data: {}, \
            \n\tmix_hash: {}, \n\tnonce: {} \n}}",
            self.parent_hash,
            self.sha3_uncles,
            self.miner,
            self.state_root,
            self.transactions_root,
            self.receipts_root,
            self.difficulty,
            self.number,
            self.gas_limit,
            self.gas_used,
            self.time_stamp,
            self.extra_data,
            self.mix_hash,
            self.nonce
        )
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::freezer::rlp::RlpDeserializer;

    #[test]
    fn test_header_deserialize() {
        // This is the header of blocker number 1
        let test_header: Vec<u8> = vec![
            0xf9, 0x02, 0x11, 0xa0, 0xd4, 0xe5, 0x67, 0x40, 0xf8, 0x76, 0xae, 0xf8, 0xc0, 0x10,
            0xb8, 0x6a, 0x40, 0xd5, 0xf5, 0x67, 0x45, 0xa1, 0x18, 0xd0, 0x90, 0x6a, 0x34, 0xe6,
            0x9a, 0xec, 0x8c, 0x0d, 0xb1, 0xcb, 0x8f, 0xa3, 0xa0, 0x1d, 0xcc, 0x4d, 0xe8, 0xde,
            0xc7, 0x5d, 0x7a, 0xab, 0x85, 0xb5, 0x67, 0xb6, 0xcc, 0xd4, 0x1a, 0xd3, 0x12, 0x45,
            0x1b, 0x94, 0x8a, 0x74, 0x13, 0xf0, 0xa1, 0x42, 0xfd, 0x40, 0xd4, 0x93, 0x47, 0x94,
            0x05, 0xa5, 0x6e, 0x2d, 0x52, 0xc8, 0x17, 0x16, 0x18, 0x83, 0xf5, 0x0c, 0x44, 0x1c,
            0x32, 0x28, 0xcf, 0xe5, 0x4d, 0x9f, 0xa0, 0xd6, 0x7e, 0x4d, 0x45, 0x03, 0x43, 0x04,
            0x64, 0x25, 0xae, 0x42, 0x71, 0x47, 0x43, 0x53, 0x85, 0x7a, 0xb8, 0x60, 0xdb, 0xc0,
            0xa1, 0xdd, 0xe6, 0x4b, 0x41, 0xb5, 0xcd, 0x3a, 0x53, 0x2b, 0xf3, 0xa0, 0x56, 0xe8,
            0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e,
            0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62, 0x2f, 0xb5, 0xe3, 0x63,
            0xb4, 0x21, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45,
            0xe6, 0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0, 0x01,
            0x62, 0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21, 0xb9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x85, 0x03, 0xff, 0x80, 0x00, 0x00, 0x01, 0x82, 0x13, 0x88, 0x80, 0x84, 0x55, 0xba,
            0x42, 0x24, 0x99, 0x47, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30,
            0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x67, 0x6f, 0x31, 0x2e, 0x34, 0x2e, 0x32,
            0xa0, 0x96, 0x9b, 0x90, 0x0d, 0xe2, 0x7b, 0x6a, 0xc6, 0xa6, 0x77, 0x42, 0x36, 0x5d,
            0xd6, 0x5f, 0x55, 0xa0, 0x52, 0x6c, 0x41, 0xfd, 0x18, 0xe1, 0xb1, 0x6f, 0x1a, 0x12,
            0x15, 0xc2, 0xe6, 0x6f, 0x59, 0x88, 0x53, 0x9b, 0xd4, 0x97, 0x9f, 0xef, 0x1e, 0xc4,
        ];
        let mut header_deserializer = RlpDeserializer::new(&test_header).unwrap();
        let _header = Header::deserialize(&mut header_deserializer).unwrap();
        println!("{}", _header);
    }
}
