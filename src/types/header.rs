use num_bigint::BigUint;
use serde::de::Visitor;
use serde::Deserialize;

// Header returned by subscription
#[derive(Clone, Debug, PartialEq, Default)]
pub struct Header {
    pub parent_hash: [u8; 32],
    pub sha3_uncles: [u8; 32],
    pub miner: [u8; 20],
    pub state_root: [u8; 32],
    pub transactions_root: [u8; 32],
    pub receipts_root: [u8; 32],
    pub logs_bloom: [u8; 32],
    pub difficulty: BigUint,
    pub number: BigUint,
    pub gas_limit: BigUint,
    pub gas_used: BigUint,
    pub time_stamp: u64,
    pub extra_data: Vec<u8>,
    pub mix_hash: [u8; 32],
    pub nonce: [u8; 8],
}

impl<'de> Deserialize<'de> for Header {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        todo!()
    }
}

struct HeaderVisitor;

impl<'de> Visitor<'de> for HeaderVisitor {
    type Value = Header;

    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(formatter, "an ethereum block header")
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::freezer::rlp::RlpDeserializer;

    #[test]
    fn test_header_deserialize() {
        let test_header: Vec<u8> = vec![
            0x9b, 0x04, 0xf0, 0xb6, 0xf9, 0x02, 0x18, 0xa0, 0x88, 0xe9, 0x6d, 0x45, 0x37, 0xbe,
            0xa4, 0xd9, 0xc0, 0x5d, 0x12, 0x54, 0x99, 0x07, 0xb3, 0x25, 0x61, 0xd3, 0xbf, 0x31,
            0xf4, 0x5a, 0xae, 0x73, 0x4c, 0xdc, 0x11, 0x9f, 0x13, 0x40, 0x6c, 0xb6, 0xa0, 0x1d,
            0xcc, 0x4d, 0xe8, 0xde, 0xc7, 0x5d, 0x7a, 0xab, 0x85, 0xb5, 0x67, 0xb6, 0xcc, 0xd4,
            0x1a, 0xd3, 0x12, 0x45, 0x1b, 0x94, 0x8a, 0x74, 0x13, 0xf0, 0xa1, 0x42, 0xfd, 0x40,
            0xd4, 0x93, 0x47, 0x94, 0xdd, 0x2f, 0x1e, 0x6e, 0x49, 0x82, 0x02, 0xe8, 0x6d, 0x8f,
            0x54, 0x42, 0xaf, 0x59, 0x65, 0x80, 0xa4, 0xf0, 0x3c, 0x2c, 0xa0, 0x49, 0x43, 0xd9,
            0x41, 0x63, 0x74, 0x11, 0x10, 0x74, 0x94, 0xda, 0x9e, 0xc8, 0xbc, 0x04, 0x35, 0x9d,
            0x73, 0x1b, 0xfd, 0x08, 0xb7, 0x2b, 0x4d, 0x0e, 0xdc, 0xbd, 0x4c, 0xd2, 0xec, 0xb3,
            0x41, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6,
            0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62,
            0x2f, 0xb5, 0xe3, 0x63, 0xb4, 0x21, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55,
            0xa6, 0xff, 0x83, 0x45, 0xe6, 0x92, 0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b, 0x99,
            0x6c, 0xad, 0xc0, 0x01, 0x62, 0x09, 0x21, 0x08, 0xb9, 0x01, 0x00, 0xfe, 0x01, 0x00,
            0xfe, 0x01, 0x00, 0xfe, 0x01, 0x00, 0xfe, 0x01, 0x00, 0xf0, 0x5a, 0x85, 0x03, 0xff,
            0x00, 0x10, 0x00, 0x02, 0x82, 0x13, 0x88, 0x80, 0x84, 0x55, 0xba, 0x42, 0x41, 0xa0,
            0x47, 0x65, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x2d, 0x30, 0x63,
            0x64, 0x63, 0x37, 0x36, 0x34, 0x37, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x67,
            0x6f, 0x31, 0x2e, 0x34, 0xa0, 0x2f, 0x07, 0x90, 0xc5, 0xaa, 0x31, 0xab, 0x94, 0x19,
            0x5e, 0x1f, 0x64, 0x43, 0xd6, 0x45, 0xaf, 0x5b, 0x75, 0xc4, 0x6c, 0x04, 0xfb, 0xf9,
            0x91, 0x17, 0x11, 0x19, 0x8a, 0x0c, 0xe8, 0xfd, 0xda, 0x88, 0xb8, 0x53, 0xfa, 0x26,
            0x1a, 0x86, 0xaa, 0x9e,
        ];
        let mut header_deserializer = RlpDeserializer::new(&test_header);
        let header = Header::deserialize(&mut header_deserializer).unwrap();
        assert_eq!(
            header,
            Header {
                ..Default::default()
            }
        );
    }
}
