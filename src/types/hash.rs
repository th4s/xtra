use super::ByteArray;
use serde::Deserialize;

#[derive(Debug, Clone, PartialEq, Deserialize)]
pub struct BlockHash(pub ByteArray<32>);

impl std::fmt::Display for BlockHash {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.0)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::freezer::rlp::RlpDeserializer;

    #[test]
    fn test_hash_deserialize() {
        // These are the block hashes of block 1 and 10
        // UNFORTUNATELY we have to prepende an artificial "0xa0" here, meaning the data in
        // hashes.cdat are not RLP properly RLP encoded for some reason
        let hash1_input: Vec<u8> = vec![
            0xa0, 0x88, 0xe9, 0x6d, 0x45, 0x37, 0xbe, 0xa4, 0xd9, 0xc0, 0x5d, 0x12, 0x54, 0x99,
            0x07, 0xb3, 0x25, 0x61, 0xd3, 0xbf, 0x31, 0xf4, 0x5a, 0xae, 0x73, 0x4c, 0xdc, 0x11,
            0x9f, 0x13, 0x40, 0x6c, 0xb6,
        ];
        let hash2_input: Vec<u8> = vec![
            0xa0, 0x4f, 0xf4, 0xa3, 0x8b, 0x27, 0x8a, 0xb4, 0x9f, 0x77, 0x39, 0xd3, 0xa4, 0xed,
            0x4e, 0x12, 0x71, 0x43, 0x86, 0xa9, 0xfd, 0xf7, 0x21, 0x92, 0xf2, 0xe8, 0xf7, 0xda,
            0x78, 0x22, 0xf1, 0x0b, 0x4d,
        ];
        let mut hash_deserializer1 = RlpDeserializer::new(&hash1_input);
        let mut hash_deserializer2 = RlpDeserializer::new(&hash2_input);

        let hash1 = BlockHash::deserialize(&mut hash_deserializer1).unwrap();
        let hash2 = BlockHash::deserialize(&mut hash_deserializer2).unwrap();

        assert_eq!(
            hash1,
            BlockHash(ByteArray::<32>([
                0x88, 0xe9, 0x6d, 0x45, 0x37, 0xbe, 0xa4, 0xd9, 0xc0, 0x5d, 0x12, 0x54, 0x99, 0x07,
                0xb3, 0x25, 0x61, 0xd3, 0xbf, 0x31, 0xf4, 0x5a, 0xae, 0x73, 0x4c, 0xdc, 0x11, 0x9f,
                0x13, 0x40, 0x6c, 0xb6,
            ]))
        );
        assert_eq!(
            hash2,
            BlockHash(ByteArray::<32>([
                0x4f, 0xf4, 0xa3, 0x8b, 0x27, 0x8a, 0xb4, 0x9f, 0x77, 0x39, 0xd3, 0xa4, 0xed, 0x4e,
                0x12, 0x71, 0x43, 0x86, 0xa9, 0xfd, 0xf7, 0x21, 0x92, 0xf2, 0xe8, 0xf7, 0xda, 0x78,
                0x22, 0xf1, 0x0b, 0x4d
            ]))
        );
    }
}
